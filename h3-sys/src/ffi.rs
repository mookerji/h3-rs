/* automatically generated by rust-bindgen */

pub const MAX_CELL_BNDRY_VERTS: u32 = 10;
pub type H3Index = u64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GeoCoord {
    pub lat: f64,
    pub lon: f64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GeoBoundary {
    pub numVerts: ::std::os::raw::c_int,
    pub verts: [GeoCoord; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Geofence {
    pub numVerts: ::std::os::raw::c_int,
    pub verts: *mut GeoCoord,
}
impl Default for Geofence {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeoPolygon {
    pub geofence: Geofence,
    pub numHoles: ::std::os::raw::c_int,
    pub holes: *mut Geofence,
}
impl Default for GeoPolygon {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeoMultiPolygon {
    pub numPolygons: ::std::os::raw::c_int,
    pub polygons: *mut GeoPolygon,
}
impl Default for GeoMultiPolygon {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkedGeoCoord {
    pub vertex: GeoCoord,
    pub next: *mut LinkedGeoCoord,
}
impl Default for LinkedGeoCoord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkedGeoLoop {
    pub first: *mut LinkedGeoCoord,
    pub last: *mut LinkedGeoCoord,
    pub next: *mut LinkedGeoLoop,
}
impl Default for LinkedGeoLoop {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinkedGeoPolygon {
    pub first: *mut LinkedGeoLoop,
    pub last: *mut LinkedGeoLoop,
    pub next: *mut LinkedGeoPolygon,
}
impl Default for LinkedGeoPolygon {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CoordIJ {
    pub i: ::std::os::raw::c_int,
    pub j: ::std::os::raw::c_int,
}
extern "C" {
    pub fn geoToH3(g: *const GeoCoord, res: ::std::os::raw::c_int) -> H3Index;
}
extern "C" {
    pub fn h3ToGeo(h3: H3Index, g: *mut GeoCoord);
}
extern "C" {
    pub fn h3ToGeoBoundary(h3: H3Index, gp: *mut GeoBoundary);
}
extern "C" {
    pub fn maxKringSize(k: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kRing(origin: H3Index, k: ::std::os::raw::c_int, out: *mut H3Index);
}
extern "C" {
    pub fn kRingDistances(
        origin: H3Index,
        k: ::std::os::raw::c_int,
        out: *mut H3Index,
        distances: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hexRing(
        origin: H3Index,
        k: ::std::os::raw::c_int,
        out: *mut H3Index,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn polyfill(geoPolygon: *const GeoPolygon, res: ::std::os::raw::c_int, out: *mut H3Index);
}
extern "C" {
    pub fn degsToRads(degrees: f64) -> f64;
}
extern "C" {
    pub fn radsToDegs(radians: f64) -> f64;
}
extern "C" {
    pub fn hexAreaKm2(res: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hexAreaM2(res: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn edgeLengthKm(res: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn edgeLengthM(res: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn numHexagons(res: ::std::os::raw::c_int) -> i64;
}
extern "C" {
    pub fn getRes0Indexes(out: *mut H3Index);
}
extern "C" {
    pub fn h3GetResolution(h: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn h3GetBaseCell(h: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stringToH3(str: *const ::std::os::raw::c_char) -> H3Index;
}
extern "C" {
    pub fn h3ToString(h: H3Index, str: *mut ::std::os::raw::c_char, sz: usize);
}
extern "C" {
    pub fn h3IsValid(h: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn h3ToParent(h: H3Index, parentRes: ::std::os::raw::c_int) -> H3Index;
}
extern "C" {
    pub fn maxH3ToChildrenSize(
        h: H3Index,
        childRes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn h3ToChildren(h: H3Index, childRes: ::std::os::raw::c_int, children: *mut H3Index);
}
extern "C" {
    pub fn compact(
        h3Set: *const H3Index,
        compactedSet: *mut H3Index,
        numHexes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uncompact(
        compactedSet: *const H3Index,
        numHexes: ::std::os::raw::c_int,
        h3Set: *mut H3Index,
        maxHexes: ::std::os::raw::c_int,
        res: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn h3IsResClassIII(h: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn h3IsPentagon(h: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn maxFaceCount(h3: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn h3GetFaces(h3: H3Index, out: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn h3IndexesAreNeighbors(origin: H3Index, destination: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getH3UnidirectionalEdge(origin: H3Index, destination: H3Index) -> H3Index;
}
extern "C" {
    pub fn h3UnidirectionalEdgeIsValid(edge: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getOriginH3IndexFromUnidirectionalEdge(edge: H3Index) -> H3Index;
}
extern "C" {
    pub fn getDestinationH3IndexFromUnidirectionalEdge(edge: H3Index) -> H3Index;
}
extern "C" {
    pub fn getH3IndexesFromUnidirectionalEdge(edge: H3Index, originDestination: *mut H3Index);
}
extern "C" {
    pub fn getH3UnidirectionalEdgesFromHexagon(origin: H3Index, edges: *mut H3Index);
}
extern "C" {
    pub fn getH3UnidirectionalEdgeBoundary(edge: H3Index, gb: *mut GeoBoundary);
}
extern "C" {
    pub fn h3Distance(origin: H3Index, h3: H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn h3Line(start: H3Index, end: H3Index, out: *mut H3Index) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn experimentalH3ToLocalIj(
        origin: H3Index,
        h3: H3Index,
        out: *mut CoordIJ,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn experimentalLocalIjToH3(
        origin: H3Index,
        ij: *const CoordIJ,
        out: *mut H3Index,
    ) -> ::std::os::raw::c_int;
}
